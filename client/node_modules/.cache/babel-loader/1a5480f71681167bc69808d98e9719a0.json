{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\Desktop\\\\repos\\\\todos-redux\\\\client\\\\src\\\\components\\\\headerComponents\\\\Form.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addTodoAsync } from \"../../redux/todos/todosSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Form() {\n  _s();\n\n  const [title, setTitle] = useState(\"\");\n  const dispatch = useDispatch();\n  const isLoading = useSelector(state => state.addNewTodoIsLoading);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!title) return;\n    await dispatch(addTodoAsync({\n      title\n    }));\n    setTitle(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    style: {\n      display: \"flex\",\n      alignItems: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"new-todo\",\n      placeholder: \"What needs to be done?\",\n      autoFocus: true,\n      value: title,\n      onChange: e => setTitle(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        paddingRight: 10\n      },\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Form, \"wnFNNVZkiSNDLaBNzzZJFC6mHYM=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["useState","useDispatch","useSelector","addTodoAsync","Form","title","setTitle","dispatch","isLoading","state","addNewTodoIsLoading","handleSubmit","e","preventDefault","display","alignItems","target","value","paddingRight"],"sources":["C:/Users/dell/Desktop/repos/todos-redux/client/src/components/headerComponents/Form.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addTodoAsync } from \"../../redux/todos/todosSlice\";\r\n\r\nfunction Form() {\r\n  const [title, setTitle] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const isLoading = useSelector(state=> state.addNewTodoIsLoading)\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!title) return;\r\n    await dispatch(addTodoAsync({ title }));\r\n    setTitle(\"\");\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit} style={{display:\"flex\",alignItems:\"center\"}}>\r\n      <input\r\n        className=\"new-todo\"\r\n        placeholder=\"What needs to be done?\"\r\n        autoFocus\r\n        value={title}\r\n        onChange={(e) => setTitle(e.target.value)}\r\n      />\r\n      {isLoading && <span style={{paddingRight: 10}}>Loading...</span>}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,YAAT,QAA6B,8BAA7B;;;AAEA,SAASC,IAAT,GAAgB;EAAA;;EACd,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAMO,QAAQ,GAAGN,WAAW,EAA5B;EACA,MAAMO,SAAS,GAAGN,WAAW,CAACO,KAAK,IAAGA,KAAK,CAACC,mBAAf,CAA7B;;EAEA,MAAMC,YAAY,GAAG,MAAOC,CAAP,IAAa;IAChCA,CAAC,CAACC,cAAF;IACA,IAAI,CAACR,KAAL,EAAY;IACZ,MAAME,QAAQ,CAACJ,YAAY,CAAC;MAAEE;IAAF,CAAD,CAAb,CAAd;IACAC,QAAQ,CAAC,EAAD,CAAR;EACD,CALD;;EAMA,oBACE;IAAM,QAAQ,EAAEK,YAAhB;IAA8B,KAAK,EAAE;MAACG,OAAO,EAAC,MAAT;MAAgBC,UAAU,EAAC;IAA3B,CAArC;IAAA,wBACE;MACE,SAAS,EAAC,UADZ;MAEE,WAAW,EAAC,wBAFd;MAGE,SAAS,MAHX;MAIE,KAAK,EAAEV,KAJT;MAKE,QAAQ,EAAGO,CAAD,IAAON,QAAQ,CAACM,CAAC,CAACI,MAAF,CAASC,KAAV;IAL3B;MAAA;MAAA;MAAA;IAAA,QADF,EAQGT,SAAS,iBAAI;MAAM,KAAK,EAAE;QAACU,YAAY,EAAE;MAAf,CAAb;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QARhB;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAYD;;GAvBQd,I;UAEUH,W,EACCC,W;;;KAHXE,I;AAyBT,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}